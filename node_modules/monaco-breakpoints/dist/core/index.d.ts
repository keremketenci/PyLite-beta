import { Handler, BreakpointEvents, MonacoBreakpointProps } from '../types';
export default class MonacoBreakpoint {
    private preLineCount;
    private hoverDecorationId;
    private highlightDecorationId;
    private editor;
    private eventEmitter;
    private isUndoing;
    private isLineCountChanged;
    private lineContent;
    private mouseMoveDisposable;
    private mouseDownDisposable;
    private contentChangedDisposable;
    private cursorPositionChangedDisposable;
    private decorationIdAndRangeMap;
    private lineNumberAndDecorationIdMap;
    constructor(params: MonacoBreakpointProps);
    private initMouseEvent;
    private initEditorEvent;
    private getModel;
    private getLineCount;
    private getMouseEventTarget;
    private getLineDecoration;
    private getAllDecorations;
    private removeHoverDecoration;
    private removeHighlightDecoration;
    private removeAllDecorations;
    /**
     * Remove extra decoration after re render new breakpoint decoration,
     * The purpose is to synchronize with decorationIdAndRangeMap & lineNumberAndDecorationIdMap
     */
    private removeExtraDecoration;
    private removeSpecifyDecoration;
    private createSpecifyDecoration;
    private createBreakpointDecoration;
    private replaceSpecifyLineNumberAndIdMap;
    /**
     *
     * @param position monaco.IPosition
     * @param needFullContent if set true, return the full line content from column 1
     * @returns
     */
    private getLineContentAtPosition;
    /**
     * @description when decoration changed, check if line break in head.
     * @returns Boolean
     */
    private checkIfLineBreakInHead;
    private emit;
    private emitBreakpointChanged;
    on<T extends keyof BreakpointEvents>(event: T, handler: Handler<BreakpointEvents[T]>): void;
    off<T extends keyof BreakpointEvents>(event: T, handler: Handler<BreakpointEvents[T]>): void;
    /**
     * @description set background highlight for lineNumber
     * @param lineNumber
     */
    setLineHighlight(lineNumber: number): void;
    /**
     * @description remove the exist highlight line
     */
    removeHighlight(): void;
    /**
     * @returns The set of line numbers where the breakpoint is located
     */
    getBreakpoints(): number[];
    /**
     * @returns Remove all breakpoints
     */
    clearBreakpoints(): void;
    dispose(): void;
}
