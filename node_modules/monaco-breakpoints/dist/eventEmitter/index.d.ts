import { Handler } from '../types';
export declare class EventEmitter<BreakpointEvents extends Record<string, any>> {
    private eventsMap;
    /**
     * @description subscribe event with handler
     * @param event event name
     * @param handler event handler
     */
    on<K extends keyof BreakpointEvents>(event: K, handler: Handler<BreakpointEvents[K]>): void;
    /**
     * @description subscribe event with handler handler one times
     * @param event event name
     * @param handler event handler
     */
    once<K extends keyof BreakpointEvents>(event: K, handler: Handler<BreakpointEvents[K]>): void;
    /**
     * @description handler would be excute when emit
     * @param event event name
     * @param args event handler arguments
     */
    emit<K extends keyof BreakpointEvents>(event: K, args: BreakpointEvents[K]): void;
    /**
     * @description unsubscribe event handler
     * @param event event name
     * @param handler event handler need unsubscribe
     */
    off<K extends keyof BreakpointEvents>(event: K, handler?: Handler<BreakpointEvents[K]>): void;
}
